from aiogram import Bot, Dispatcher, executor, types
from uvloop import loop
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
import ujson
import emoji
import logging
import yaml
from helpers import bbunchify
from aiohttp import ClientSession
from aiohttp.client_exceptions import ClientConnectorError
from datetime import datetime, timedelta


with open('config.yaml') as f:
    config = bbunchify(yaml.safe_load(f))

TELEGRAM_TOKEN = config.general.telegram_token

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['keyboard'])
async def cmd_start(message: types.Message):
    poll_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    poll_keyboard.row(KeyboardButton('–õ—é–¥–∏ –≤ –∑–æ–Ω–µ'), KeyboardButton('–û—Ç—á–µ—Ç—ã'), KeyboardButton('–û—Ç–º–µ–Ω–∞'))
    poll_keyboard.add(KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç ‚òéÔ∏è', request_contact=True),
                      KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é üó∫Ô∏è', request_location=True)
                      )
    poll_keyboard.add(KeyboardButton('–û—Ç–º–µ–Ω–∞'))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞", reply_markup=poll_keyboard)


@dp.message_handler(lambda message: message.text == "–û—Ç–º–µ–Ω–∞")
async def action_cancel(message: types.Message):
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=ReplyKeyboardRemove())


@dp.message_handler(commands='start')
async def inline_keyboard(message: types.Message):
    people_in_zone_button = InlineKeyboardButton('–õ—é–¥–∏ –≤ –∑–æ–Ω–µ', callback_data='people_in_zone')
    reports_button = InlineKeyboardButton('–û—Ç—á–µ—Ç—ã', callback_data='reports')
    kb = InlineKeyboardMarkup().add(people_in_zone_button, reports_button)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=kb)


async def fetch(url):
    async with ClientSession() as session:
        async with session.get(url) as r:
            if r.status != 200:
                return f'Error {r.status}'
            content = await r.json()
    return content


async def total_report():
    url = 'http://localhost:8000/api/v1.0/total_report/'
    params = {
        'db_type': 'aqua',
        'company_id': '36',
        'date_from': datetime.now().strftime('%Y%m%d'),
        'date_to': (datetime.now() - timedelta(weeks=15)).strftime('%Y%m%d')
    }
    try:
        response = await fetch(url, params=params)
    except ClientConnectorError:
        return '–°–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω'
    if response['status'] != 'ok':
        return f"Errors: {response['errors']}"
    result = '–õ—é–¥–∏ –≤ –∑–æ–Ω–µ:\n'
    for zone_name, people in response['data']['report'].items():
        result += f'{zone_name}: {people}\n'
    return result


async def people_in_zone():
    url = 'http://localhost:8000/api/v1.0/people-in-zone/'
    try:
        response = await fetch(url)
    except ClientConnectorError:
        return '–°–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω'
    if response['status'] != 'ok':
        return f"Errors: {response['errors']}"
    result = '–õ—é–¥–∏ –≤ –∑–æ–Ω–µ:\n'
    for zone_name, people in response['data']['report'].items():
        result += f'{zone_name}: {people}\n'
    return result


@dp.callback_query_handler(lambda c: c.data == 'people_in_zone')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, await people_in_zone())


@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    await message.reply('–•–µ–µ–µ–µ–µ–ª–ø!')


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)